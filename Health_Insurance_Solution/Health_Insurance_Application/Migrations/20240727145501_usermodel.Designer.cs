// <auto-generated />
using System;
using Health_Insurance_Application.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Health_Insurance_Application.Migrations
{
    [DbContext(typeof(HealthInsuranceContext))]
    [Migration("20240727145501_usermodel")]
    partial class usermodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Health_Insurance_Application.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Uid = 103
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Claims", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimId"), 1L, 1);

                    b.Property<float>("AmountApproved")
                        .HasColumnType("real");

                    b.Property<float>("AmountClaimed")
                        .HasColumnType("real");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<string>("ClaimStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("HospitalAgentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.HasKey("ClaimId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HospitalAgentId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            ClaimId = 1,
                            AmountApproved = 1500f,
                            AmountClaimed = 2000f,
                            ApprovedBy = 1,
                            ClaimStatus = "Approved",
                            CustomerId = 10001,
                            HospitalAgentId = 11111,
                            PolicyId = 1
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergenceyContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 10001,
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmergenceyContact = "888888888",
                            Gender = "Male",
                            Uid = 101
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hosiptals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchCode = "Kmm05",
                            City = "Khammam",
                            Name = "Hosiptal A",
                            State = "Telangana",
                            Street = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            Zipcode = 507001
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.HospitalAgent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"), 1L, 1);

                    b.Property<string>("AgentContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HosiptalId")
                        .HasColumnType("int");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.HasKey("AgentId");

                    b.HasIndex("HosiptalId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("HospitalAgents");

                    b.HasData(
                        new
                        {
                            AgentId = 11111,
                            AgentContact = "7000001111",
                            HosiptalId = 1,
                            Uid = 102
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Payment", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("PaymentAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            CustomerId = 10001,
                            PaymentAmount = 500f,
                            PaymentDate = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(582),
                            PaymentStatus = "Completed",
                            PolicyId = 1,
                            Remarks = "First payment of the year"
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Policy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextPaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PolicyEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PolicyExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PolicyStartDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("PremiumAmount")
                        .HasColumnType("real");

                    b.Property<float>("QuoteAmount")
                        .HasColumnType("real");

                    b.Property<string>("RenewalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.HasKey("PolicyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SchemeId")
                        .IsUnique();

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            PolicyId = 1,
                            CustomerId = 10001,
                            LastPaymentDate = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(533),
                            NextPaymentDueDate = new DateTime(2025, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(534),
                            PaymentFrequency = "Quarterly",
                            PolicyEndDate = new DateTime(2025, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(529),
                            PolicyExpiryDate = new DateTime(2025, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(536),
                            PolicyStartDate = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(529),
                            PremiumAmount = 500f,
                            QuoteAmount = 1000f,
                            RenewalStatus = "Renwed",
                            SchemeId = 1
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Renewal", b =>
                {
                    b.Property<int>("RenewalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RenewalId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("DiscountApplied")
                        .HasColumnType("real");

                    b.Property<string>("NewPaymentFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NewPolicyStartDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("NewPremiumAmount")
                        .HasColumnType("real");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RenewalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RenewalId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Renewals");

                    b.HasData(
                        new
                        {
                            RenewalId = 1,
                            CustomerId = 10001,
                            DiscountApplied = 0f,
                            NewPaymentFrequency = "Anually",
                            NewPolicyStartDate = new DateTime(2025, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(590),
                            NewPremiumAmount = 550f,
                            PolicyId = 1,
                            RenewalDate = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(590),
                            RenewalStatus = "Pending"
                        },
                        new
                        {
                            RenewalId = 2,
                            CustomerId = 10001,
                            DiscountApplied = 100f,
                            NewPaymentFrequency = "Quarterly",
                            NewPolicyStartDate = new DateTime(2026, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(593),
                            NewPremiumAmount = 800f,
                            PolicyId = 1,
                            RenewalDate = new DateTime(2025, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(593),
                            RenewalStatus = "Renwed"
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Scheme", b =>
                {
                    b.Property<int>("SchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchemeId"), 1L, 1);

                    b.Property<float>("BasePremiumAmount")
                        .HasColumnType("real");

                    b.Property<float>("CoverageAmount")
                        .HasColumnType("real");

                    b.Property<string>("SchemeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchemeId");

                    b.ToTable("Schemes");

                    b.HasData(
                        new
                        {
                            SchemeId = 1,
                            BasePremiumAmount = 500f,
                            CoverageAmount = 10000f,
                            SchemeDescription = "Provides basic health coverage.",
                            SchemeName = "Basic Health Plan",
                            SchemeType = "Individual"
                        },
                        new
                        {
                            SchemeId = 2,
                            BasePremiumAmount = 750f,
                            CoverageAmount = 25000f,
                            SchemeDescription = "Provides health coverage for families.",
                            SchemeName = "Family Health Plan",
                            SchemeType = "Family"
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.User", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Uid = 101,
                            Address = "St Street opp lalbagh, chennai , TamilNadu",
                            CreatedAt = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(370),
                            Email = "customer1@gmail.com",
                            FirstName = "Customer",
                            LastName = "Test",
                            LastUpdated = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(379),
                            MobileNumber = "7673978319",
                            Password = new byte[] { 235, 14, 55, 207, 96, 113, 141, 213, 75, 54, 243, 14, 91, 220, 74, 250, 56, 220, 78, 140, 64, 71, 151, 25, 139, 11, 103, 7, 200, 198, 172, 34, 123, 51, 225, 104, 237, 96, 16, 9, 151, 5, 156, 162, 142, 38, 254, 249, 44, 239, 96, 147, 215, 45, 203, 2, 191, 245, 240, 107, 78, 97, 174, 91 },
                            Role = "Customer",
                            Salt = new byte[] { 238, 127, 249, 67, 141, 129, 245, 84, 44, 56, 65, 128, 156, 166, 253, 32, 96, 99, 211, 38, 253, 139, 19, 49, 237, 33, 178, 234, 152, 83, 230, 130, 235, 46, 80, 150, 152, 221, 153, 94, 65, 196, 173, 41, 58, 197, 89, 25, 118, 206, 111, 180, 129, 146, 241, 10, 133, 152, 53, 215, 130, 33, 6, 171, 7, 112, 180, 4, 252, 19, 153, 135, 222, 11, 151, 235, 207, 157, 85, 239, 35, 230, 108, 135, 30, 155, 236, 29, 184, 56, 228, 79, 148, 143, 112, 173, 189, 119, 158, 209, 114, 48, 169, 59, 10, 189, 217, 194, 54, 163, 46, 156, 75, 39, 117, 192, 98, 5, 233, 223, 251, 170, 37, 90, 139, 27, 229, 45 },
                            Zipcode = "507001"
                        },
                        new
                        {
                            Uid = 102,
                            Address = "St Street opp lalbagh, chennai , TamilNadu",
                            CreatedAt = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(390),
                            Email = "agent@gmail.com",
                            FirstName = "Agent",
                            LastName = "Test",
                            LastUpdated = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(390),
                            MobileNumber = "9999999999",
                            Password = new byte[] { 235, 14, 55, 207, 96, 113, 141, 213, 75, 54, 243, 14, 91, 220, 74, 250, 56, 220, 78, 140, 64, 71, 151, 25, 139, 11, 103, 7, 200, 198, 172, 34, 123, 51, 225, 104, 237, 96, 16, 9, 151, 5, 156, 162, 142, 38, 254, 249, 44, 239, 96, 147, 215, 45, 203, 2, 191, 245, 240, 107, 78, 97, 174, 91 },
                            Role = "Agent",
                            Salt = new byte[] { 238, 127, 249, 67, 141, 129, 245, 84, 44, 56, 65, 128, 156, 166, 253, 32, 96, 99, 211, 38, 253, 139, 19, 49, 237, 33, 178, 234, 152, 83, 230, 130, 235, 46, 80, 150, 152, 221, 153, 94, 65, 196, 173, 41, 58, 197, 89, 25, 118, 206, 111, 180, 129, 146, 241, 10, 133, 152, 53, 215, 130, 33, 6, 171, 7, 112, 180, 4, 252, 19, 153, 135, 222, 11, 151, 235, 207, 157, 85, 239, 35, 230, 108, 135, 30, 155, 236, 29, 184, 56, 228, 79, 148, 143, 112, 173, 189, 119, 158, 209, 114, 48, 169, 59, 10, 189, 217, 194, 54, 163, 46, 156, 75, 39, 117, 192, 98, 5, 233, 223, 251, 170, 37, 90, 139, 27, 229, 45 },
                            Zipcode = "507002"
                        },
                        new
                        {
                            Uid = 103,
                            Address = "St Street opp lalbagh, chennai , TamilNadu",
                            CreatedAt = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(399),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Test",
                            LastUpdated = new DateTime(2024, 7, 27, 20, 25, 0, 835, DateTimeKind.Local).AddTicks(399),
                            MobileNumber = "111111111",
                            Password = new byte[] { 235, 14, 55, 207, 96, 113, 141, 213, 75, 54, 243, 14, 91, 220, 74, 250, 56, 220, 78, 140, 64, 71, 151, 25, 139, 11, 103, 7, 200, 198, 172, 34, 123, 51, 225, 104, 237, 96, 16, 9, 151, 5, 156, 162, 142, 38, 254, 249, 44, 239, 96, 147, 215, 45, 203, 2, 191, 245, 240, 107, 78, 97, 174, 91 },
                            Role = "Admin",
                            Salt = new byte[] { 238, 127, 249, 67, 141, 129, 245, 84, 44, 56, 65, 128, 156, 166, 253, 32, 96, 99, 211, 38, 253, 139, 19, 49, 237, 33, 178, 234, 152, 83, 230, 130, 235, 46, 80, 150, 152, 221, 153, 94, 65, 196, 173, 41, 58, 197, 89, 25, 118, 206, 111, 180, 129, 146, 241, 10, 133, 152, 53, 215, 130, 33, 6, 171, 7, 112, 180, 4, 252, 19, 153, 135, 222, 11, 151, 235, 207, 157, 85, 239, 35, 230, 108, 135, 30, 155, 236, 29, 184, 56, 228, 79, 148, 143, 112, 173, 189, 119, 158, 209, 114, 48, 169, 59, 10, 189, 217, 194, 54, 163, 46, 156, 75, 39, 117, 192, 98, 5, 233, 223, 251, 170, 37, 90, 139, 27, 229, 45 },
                            Zipcode = "507003"
                        });
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Admin", b =>
                {
                    b.HasOne("Health_Insurance_Application.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Health_Insurance_Application.Models.Admin", "Uid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Claims", b =>
                {
                    b.HasOne("Health_Insurance_Application.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("Health_Insurance_Application.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Health_Insurance_Application.Models.HospitalAgent", "HospitalAgent")
                        .WithMany()
                        .HasForeignKey("HospitalAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Health_Insurance_Application.Models.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("HospitalAgent");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Customer", b =>
                {
                    b.HasOne("Health_Insurance_Application.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Health_Insurance_Application.Models.Customer", "Uid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.HospitalAgent", b =>
                {
                    b.HasOne("Health_Insurance_Application.Models.Hospital", "Hosiptal")
                        .WithMany("Agents")
                        .HasForeignKey("HosiptalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Health_Insurance_Application.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Health_Insurance_Application.Models.HospitalAgent", "Uid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hosiptal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Payment", b =>
                {
                    b.HasOne("Health_Insurance_Application.Models.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Health_Insurance_Application.Models.Policy", "Policy")
                        .WithMany("Payments")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Policy", b =>
                {
                    b.HasOne("Health_Insurance_Application.Models.Customer", "Customer")
                        .WithMany("Policies")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Health_Insurance_Application.Models.Scheme", "Scheme")
                        .WithOne()
                        .HasForeignKey("Health_Insurance_Application.Models.Policy", "SchemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Renewal", b =>
                {
                    b.HasOne("Health_Insurance_Application.Models.Customer", "Customer")
                        .WithMany("Renewals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Health_Insurance_Application.Models.Policy", "Policy")
                        .WithMany("Renewals")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Customer", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Policies");

                    b.Navigation("Renewals");
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Hospital", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("Health_Insurance_Application.Models.Policy", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Renewals");
                });
#pragma warning restore 612, 618
        }
    }
}
